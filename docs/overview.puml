@startuml overview

interface Registrable {
    +bind<R>(): BuildableEntry
}

interface BuildableEntry {
    withTag(tag: string): BuildableEntry
    withContract<C>(): BuildableEntry
    withId(id: Identifier): BuildableEntry
    build(): Registrable
}

Registrable -left- BuildableEntry
BuildableEntry -left- Identifier

abstract class Identifier {
    +entry: Type
    +contract?: Type
    +tag?: string 
}

hide Identifier methods

interface Producible {
    +make(): Option<Object>
}

abstract class ManageableScope {
    -dependencies: Dependency[0..*]
    -resolvable: Resolvable
}

ManageableScope --|> Producible
ManageableScope --* Resolvable
hide ManageableScope methods

class SingletonScope {
    #cached: Lazy<Type>
}

SingletonScope -left-|> ManageableScope
hide SingletonScope methods

class TransientScope

TransientScope -right-|> ManageableScope
hide TransientScope fields
hide TransientScope methods

abstract class Dependency {
    +entry: Type
    +tag: string
}

ManageableScope --* Dependency
hide Dependency methods

interface Resolvable {
    +resolve<C>(): Option<C>
    +resolveByTag<C>(tag: string): Option<C>
}

abstract class Container {
    #scopes: Map<Identifier, ManageableScope>
}

Container -up-|> Registrable
Container -left-|> Resolvable
Container --* ManageableScope
hide Container methods

hide interface fields

skinparam defaultFontName Cascadia Code

skinparam class {
  BackgroundColor White
  ArrowColor Black
  BorderColor Gray
}

@enduml